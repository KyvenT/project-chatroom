datasource db {
  provider = "postgresql"
  url      = env(DB_URL)
}

generator client {
  provider = "prisma-client-js"
}

model Chatroom {
  id          Int     @id @default(autoincrement())
  title       String
  owner       User    @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime  @default(now())
  messages    Message[]
  members     ChatroomMember[]
  invites     Invite[]
  guests      Guest[]
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  sender      User      @relation(fields: [senderId], references: [id])
  senderId   String
  chatroom    Chatroom  @relation(fields: [chatroomId], references [id])
  chatroomId Int
  createdAt  DateTime  @default(now())
  editedAt   DateTime?
}

model User {
  id            String   @id @default(uuid())
  email         String?  @unique
  username      String   @unique 
  passwordHash  String
  status        Status
  createdAt    DateTime @default(now())
  sentMessages Message[]
  chatrooms     ChatroomMember[]
  sentInvites    Invite[]   @relation("SentInvite")
  receivedInvites  Invite[]   @relation("ReceivedInvite")
}

model ChatroomMember {
  member      User      @relation(fields: [memberId], references [id])
  memberId   String
  chatroom    Chatroom  @relation(fields: [chatroomId], references [id])
  chatroomId Int
  joinedAt   DateTime   @default(now())

  @@id([chatroomId, memberId])
}

model Invite {
  sender        User    @relation("SentInvite", fields: [senderId], references [id])
  senderId     String
  receiver      User    @relation("ReceivedInvite", fields: [receiverId], references [id])
  receiverId   String
  chatroom      Chatroom @relation(fields: [chatroomId], references [id])
  chatroomId   Int
  status        InviteStatus
  sentAt       DateTime  @default(now())

  @@id(name: "inviteId", [senderId, receiverId, chatroomId])
}

enum Status {
  ONLINE
  AWAY
  OFFLINE
}

enum InviteStatus {
  ACCEPTED
  PENDING
}